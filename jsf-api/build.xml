<?xml version='1.0' encoding='UTF-8'?>

<!--
 DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 
 Copyright 1997-2007 Sun Microsystems, Inc. All rights reserved.
 
 The contents of this file are subject to the terms of either the GNU
 General Public License Version 2 only ("GPL") or the Common Development
 and Distribution License("CDDL") (collectively, the "License").  You
 may not use this file except in compliance with the License. You can obtain
 a copy of the License at https://glassfish.dev.java.net/public/CDDL+GPL.html
 or glassfish/bootstrap/legal/LICENSE.txt.  See the License for the specific
 language governing permissions and limitations under the License.
 
 When distributing the software, include this License Header Notice in each
 file and include the License file at glassfish/bootstrap/legal/LICENSE.txt.
 Sun designates this particular file as subject to the "Classpath" exception
 as provided by Sun in the GPL Version 2 section of the License file that
 accompanied this code.  If applicable, add the following below the License
 Header, with the fields enclosed by brackets [] replaced by your own
 identifying information: "Portions Copyrighted [year]
 [name of copyright owner]"
 
 Contributor(s):
 
 If you wish your version of this file to be governed by only the CDDL or
 only the GPL Version 2, indicate your decision by adding "[Contributor]
 elects to include this software in this distribution under the [CDDL or GPL
 Version 2] license."  If you don't indicate a single choice of license, a
 recipient has the option to distribute your version of this file under
 either the CDDL, the GPL Version 2 or to extend the choice of license to
 its licensees as provided above.  However, if you add GPL Version 2 code
 and therefore, elected the GPL Version 2 license, then the option applies
 only if the new code is made subject to such option by the copyright
 holder.
-->


<!--
  =======================================================================
    JSF-API build file
  =======================================================================
-->
<project name="JSF-API" default="main" basedir=".">

    <property file="${user.home}/build.properties"/>
    <property file="../build.properties"/>

    <import file="${jsf.build.home}/common/ant/common.xml"/>

    <!-- Structural -->
    <property name="doc.dir" value="${basedir}/doc"/>
    <property name="src.dir" value="${basedir}/src"/>
    <property name="tools.dir" value="${basedir}/tools"/>
    <property name="test.dir" value="${basedir}/test"/>
    <property name="dist.dir" value="${basedir}/dist"/>
    <property name="build.dir" value="build"/>
    <property name="build.classes.dir" value="${build.dir}/classes"/>
    <property name="build.lib.dir" value="${build.dir}/lib"/>
    <property name="build.temp.dir" value="${build.dir}/temp"/>
    <property name="build.test.dir" value="${build.dir}/test"/>
    <property name="build.generate.dir" value="${build.dir}/generate"/>
    <property name="build.javadocs.dir" value="${build.dir}/javadocs"/>
    <property name="build.renderkitdocs.dir"
              value="${build.dir}/generate/facesdoc"/>
    <property name="build.mifdocs.dir" value="${build.dir}/mifdocs"/>
    <property name="javadoc.private" value="false"/>
    <property name="javadoc.protected" value="true"/>

    <property name="assertion.classes" value="-ea:javax.faces..."/>
    <property name="name" value="jsf-api"/>
    <property name="Name" value="JavaServer Faces API"/>

    <path id="test.classpath">
        <pathelement location="${build.classes.dir}"/>
        <pathelement location="${build.test.dir}"/>        
        <pathelement location="${tools.dir}/build/classes"/>
        <path refid="compile.classpath"/>
        <path refid="junit.classpath"/>
    </path>

    <property name="test.factory"
              value="org.apache.commons.logging.impl.LogFactoryImpl"/>
    <property name="test.failonerror" value="true"/>
    <property name="test.level" value="error"/>
    <property name="test.log"
              value="org.apache.commons.logging.impl.SimpleLog"/>
    <property name="test.runner" value="junit.textui.TestRunner"/>


    <!--
         ===================================================================
           Prepare the build
         ===================================================================
    -->
    <target name="prepare">
        <tstamp/>
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.classes.dir}"/>
        <mkdir dir="${build.lib.dir}"/>
        <mkdir dir="${build.javadocs.dir}"/>
        <mkdir dir="${build.generate.dir}"/>
    </target>

    <target name="attributes"
            description="Recreate attributes include files from property include files"
            depends="prepare">

        <!-- Copy just the properties files we wish to convert -->
        <copy todir="${doc.dir}"
              overwrite="true">
            <mapper type="glob"
                    from="*-props.xml"
                    to="*-attrs.xml"/>
            <fileset dir="${doc.dir}">
                <include name="*-props.xml"/>
                <exclude name="actionsource-props.xml"/>
                <exclude name="actionsource2-props.xml"/>
                <exclude name="editable-props.xml"/>
                <exclude name="valueholder-props.xml"/>
                <exclude name="ui*-props.xml"/>
            </fileset>
        </copy>

        <!-- Replace "property" with "attribute" in relevant cases -->
        <replace dir="${doc.dir}"
                 summary="true">
            <include name="*-attrs.xml"/>
            <replacefilter token="&lt;property"
                           value="&lt;attribute"/>
            <replacefilter token="&lt;/property"
                           value="&lt;/attribute"/>
            <replacefilter token="Properties"
                           value="Attributes"/>
        </replace>

    </target>

    <!--
         ===================================================================
           Build the API code
         ===================================================================
    -->

    <target name="compile">
        <jsf.javac destdir="${build.classes.dir}"
                   srcdir="${src.dir}:${build.generate.dir}">
            <classpath>
                <path refid="compile.classpath"/>
            </classpath>
        </jsf.javac>
    </target>

    <target name="build"
            depends="prepare,generate,copy.template.sources,compile">
        <copy todir="${build.classes.dir}">
            <fileset dir="${src.dir}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>

        <copy todir="${build.lib.dir}">
            <fileset dir="${doc.dir}">
                <include name="*.dtd"/>
            </fileset>
        </copy>
    </target>

    <target name="check.generation.necessity">
        <uptodate property="skip.generation"
                  targetfile="${build.generate.dir}/last-generation">
            <srcfiles dir="${basedir}/doc">
                <include name="standard-html-renderkit.xml"/>
            </srcfiles>
        </uptodate>
    </target>

    <target name="generate"
            depends="check.generation.necessity"
            unless="skip.generation">

        <ant dir="${tools.dir}" 
             antfile="build.xml" 
             inheritall="false"
             target="clean.generated"/>

        <ant dir="${tools.dir}"
             antfile="build.xml"
             inheritall="false" 
             target="generate.html"/>

        <copy todir="${build.generate.dir}">
            <fileset dir="${tools.dir}/build/generate">
                <include name="javax/**/*.*"/>
            </fileset>
        </copy>

        <copy todir="${build.generate.dir}/javax/faces/component/html"
              file="${src.dir}/javax/faces/component/html/package.html"/>

        <touch file="${build.generate.dir}/last-generation"/>
        
    </target>

    <target name="facesdoc"
            description="Create the Standard HTML Renderkit Documentation">

        <ant dir="${tools.dir}"
             antfile="build.xml"
             inheritall="true"
             target="docs"/>

        <mkdir dir="${build.renderkitdocs.dir}"/>
        <copy todir="${build.renderkitdocs.dir}">
            <fileset dir="${tools.dir}/build/generate/facesdoc">
                <include name="**/*.*"/>
            </fileset>
        </copy>

        <touch file="${build.generate.dir}/last-generation"/>


    </target>
    

    <target name="copy.template.sources"
            description="Copy template sources from ${tools.dir}/template-source">

        <mkdir dir="${build.generate.dir}/javax/faces/component"/>
        <filter token="protection" value=""/>

        <filter token="package" value="javax.faces.component"/>
        <copy file="${tools.dir}/template-src/MessageFactory.java"
              todir="${build.generate.dir}/javax/faces/component"
              filtering="true"/>             

        <mkdir dir="${build.generate.dir}/javax/faces/component"/>
        <filter token="package" value="javax.faces.validator"/>
        <copy file="${tools.dir}/template-src/MessageFactory.java"
              todir="${build.generate.dir}/javax/faces/validator"
              filtering="true"/>      

    </target>

    <target name="prepare.test">
        <mkdir dir="${api.test.results.dir}"/>
        <available classpathref="compile.classpath"
                       classname="javax.servlet.jsp.el.VariableResolver"
                       property="is.jsp2"/>
        <if>
            <istrue value="${is.jsp2}"/>
            <then>
                <copy file="${basedir}/test/javax/faces/mock/MockPageContext.jsp2"
                      tofile="${basedir}/test/javax/faces/mock/MockPageContext.java"/>                
            </then>
            <else>
                <copy file="${basedir}/test/javax/faces/mock/MockPageContext.jsp12"
                      tofile="${basedir}/test/javax/faces/mock/MockPageContext.java"/>                
            </else>
        </if>
    </target>

    <!--
         ===================================================================
           Build the test code
         ===================================================================
    -->

    <target name="build.test.dir" depends="build,prepare.test">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${build.test.dir}"/>

        <jsf.javac srcdir="${test.dir}"
                   destdir="${build.test.dir}">
            <classpath>
                <path refid="test.classpath"/>
            </classpath>
        </jsf.javac>

        <copy todir="${build.test.dir}">
            <fileset dir="${test.dir}" includes="**/*.properties"/>
        </copy>

        <delete file="${basedir}/test/javax/faces/mock/MockPageContext.java"/>

        <copy todir="${build.test.dir}">
            <fileset dir="${test.dir}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>

    </target>


    <!--
         ===================================================================
           Test targets
         ===================================================================
    -->


    <target name="test"
            description="Run all JUnit test cases"
            depends="build.test.dir,
                copy.template.sources,
                test.FactoryFinder,
                test.FactoryFinder2,
                test.PhaseId,
                test.component,
                test.validator,
                test.mock,
                test.model,
                test.webapp">
    </target>

    <target name="test.FactoryFinder" depends="build.test.dir">
        <echo message="Running FactoryFinder tests ..."/>
        <mkdir dir="${build.classes.dir}/META-INF/services"/>
        <echo
              file="${build.classes.dir}/META-INF/services/javax.faces.context.FacesContextFactory">javax.faces.mock.MockFacesContextFactoryExtender</echo>
        <jsf.junit test-results-dir="${api.test.results.dir}"
                   classpath-refid="test.classpath"
                   assert.classes="${assertion.classes}">
            <tests>
                <fileset dir="${build.test.dir}"
                         includes="javax/faces/FactoryFinderTestCase.class"/>
            </tests>
        </jsf.junit>
        <delete dir="${build.classes.dir}/META-INF"/>
    </target>

    <target name="test.FactoryFinder2" depends="build.test.dir">
        <echo message="Running FactoryFinder tests ..."/>
        <jsf.junit test-results-dir="${api.test.results.dir}"
                   classpath-refid="test.classpath"
                   assert.classes="${assertion.classes}">
            <tests>
                <fileset dir="${build.test.dir}"
                         includes="javax/faces/FactoryFinderTestCase2.class"/>
            </tests>
        </jsf.junit>
    </target>   

    <target name="test.PhaseId" depends="build.test.dir">
        <echo message="Running PhaseId tests ..."/>
        <jsf.junit test-results-dir="${api.test.results.dir}"
                   classpath-refid="test.classpath"
                   assert.classes="${assertion.classes}">
            <tests>
                <fileset dir="${build.test.dir}"
                         includes="javax/faces/event/PhaseIdTest.class"/>
            </tests>
        </jsf.junit>
    </target>

    <target name="test.component" depends="build.test.dir">
        <echo message="Running javax.faces.component tests ..."/>
        <jsf.junit test-results-dir="${api.test.results.dir}"
                   classpath-refid="test.classpath"
                   assert.classes="${assertion.classes}">
            <tests>
                <fileset dir="${build.test.dir}"
                         includes="javax/faces/component/*TestCase.class"
                         excludes="javax/faces/component/UIDataTestCase.class"/>
            </tests>
        </jsf.junit>
    </target>

    <target name="test.validator" depends="build.test.dir">
        <echo message="Running javax.faces.validator tests ..."/>
        <jsf.junit test-results-dir="${api.test.results.dir}"
                   classpath-refid="test.classpath"
                   assert.classes="${assertion.classes}">
            <tests>
                <fileset dir="${build.test.dir}"
                         includes="javax/faces/validator/*TestCase.class"/>
            </tests>
        </jsf.junit>
    </target>

    <target name="test.mock" depends="build.test.dir">
        <echo message="Running javax.faces.mock tests ..."/>
        <jsf.junit test-results-dir="${api.test.results.dir}"
                   classpath-refid="test.classpath"
                   assert.classes="${assertion.classes}">
            <tests>
                <fileset dir="${build.test.dir}"
                         includes="javax/faces/mock/*TestCase.class"/>
            </tests>
        </jsf.junit>
    </target>

    <target name="test.model" depends="build.test.dir">
        <echo message="Running javax.faces.model tests ..."/>
        <jsf.junit test-results-dir="${api.test.results.dir}"
                   classpath-refid="test.classpath"
                   assert.classes="${assertion.classes}">
            <tests>
                <fileset dir="${build.test.dir}"
                         includes="javax/faces/model/*TestCase.class"/>
            </tests>
        </jsf.junit>
    </target>

    <target name="test.webapp" depends="build.test.dir">
        <echo message="Running javax.faces.webapp tests ..."/>
        <jsf.junit test-results-dir="${api.test.results.dir}"
                   classpath-refid="test.classpath"
                   assert.classes="${assertion.classes}">
            <custom-sysproperties>
                <sysproperty key="base.dir" value="${basedir}/build"/>
            </custom-sysproperties>
            <tests>
            <fileset dir="${build.test.dir}"
                         includes="javax/faces/webapp/*TestCase.class"
                         excludes="javax/faces/webapp/UIComponentTagTestCase.class"/>
            </tests>
        </jsf.junit>
    </target>

    <!--
         ===================================================================
           Create the jars
         ===================================================================
    -->
    <target name="jars" depends="build">

        <jsf.manifested.jar jarfile="${build.lib.dir}/${name}.jar"
                            basedir="${build.classes.dir}"
                            extension-name="javax.faces"/>

    </target>


    <!--
         ===================================================================
           Clean up build and distribution directories
         ===================================================================
    -->
    <target name="clean" description="Clean build directory">
        <delete dir="${build.dir}"/>
        <delete dir="${api.test.results.dir}"/>
        <delete>
            <fileset dir="." includes="**/.nbattrs" defaultexcludes="no"/>
            <fileset dir="." includes="**/*~" defaultexcludes="no"/>
        </delete>
        <!-- delete this file since it's copied from another file based on JSP level -->
        <delete file="${basedir}/test/javax/faces/mock/MockPageContext.java"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${tools.dir}/build"/>
    </target>


    <!--
         ===================================================================
           Clean everything
         ===================================================================
    -->
    <target name="allclean" depends="clean">
    </target>


    <!--
         ===================================================================
           Create the API documentation
         ===================================================================
    -->

    <target name="javadoc_check">
        <uptodate property="javadoc.notrequired"
                  targetfile="${build.javadocs.dir}/packages.html">
            <srcfiles dir="${src.dir}" includes="**/*.java"/>
            <srcfiles dir="${build.generate.dir}" includes="**/*.java"/>
        </uptodate>
    </target>

    <target name="javadocs"
            depends="prepare,javadoc_check,generate,generate.javadocs,facesdoc"
            unless="javadoc.notrequired"
            description="Create the JavaDoc API documentation">

        <copy todir="${build.javadocs.dir}/javax/faces/component"
              file="${src.dir}/javax/faces/component/UIComponentHierarchy.jpg"/>
        <copy todir="${build.javadocs.dir}/javax/faces/event"
              file="${src.dir}/javax/faces/event/EventHierarchy.jpg"/>
    </target>


    <target name="generate.javadocs">
        <javadoc packagenames="javax.*"
                 destdir="${build.javadocs.dir}"
                 Overview="${src.dir}/overview.html"
                 private="${javadoc.private}"
                 protected="${javadoc.protected}"
                 windowtitle="${Name} (${spec.version})"
                 source="1.5"
                 doctitle="${Name} (${spec.version})"
                 bottom="Copyright &#169; 2002-2006 Sun Microsystems, Inc. All Rights Reserved.">
            <fileset dir="${src.dir}">
                <include name="**/*.java"/>
            </fileset>
            <fileset dir="${build.generate.dir}">
                <include name="**/*.java"/>
            </fileset>
            <classpath refid="compile.classpath"/>
        </javadoc>
    </target>


    <!--
         ===================================================================
           Main target
         ===================================================================
    -->
    <target name="main" depends="jars"
            description="Compile API classes and build JAR file"/>

    <!--
         ===================================================================
           Distributions target
         ===================================================================
    -->
    <target name="dist" depends="main,javadocs"
            description="Build distribution files">

        <!-- Create the distributions directory -->
        <mkdir dir="${dist.dir}"/>

        <!-- Create the binary distribution -->
        <zip destfile="${dist.dir}/${name}-${impl.version}.zip">
            <zipfileset dir="${build.dir}"
                        includes="lib/** javadocs/**"
                        prefix="${name}-${impl.version}"/>
        </zip>

        <!-- Create the javadocs distribution -->
        <zip destfile="${dist.dir}/${name}-javadocs-${impl.version}.zip">
            <zipfileset dir="${build.dir}"
                        includes="javadocs/** renderkitdocs/**"
                        prefix="${name}-${impl.version}"/>
        </zip>


        <!-- Create the source distribution -->
        <zip destfile="${dist.dir}/${name}-src-${impl.version}.zip">
            <zipfileset dir="${basedir}"
                        includes="build.xml COPYRIGHT LICENSE.html"
                        prefix="${name}"/>
            <zipfileset dir="${src.dir}"
                        excludes="**/CVS/**"
                        prefix="${name}/src"/>
            <zipfileset dir="${test.dir}"
                        excludes="**/CVS/**"
                        prefix="${name}/test"/>
            <zipfileset dir="${doc.dir}"
                        includes="*.dtd,standard-html-renderkit.xml"
                        prefix="${name}/doc"/>
            <zipfileset dir="${tools.dir}"
                        excludes="**/CVS/**, **/build/**"
                        prefix="jsf-tools"/>
        </zip>

    </target>

<target name="push-to-maven-prepare">
  <taskdef resource="maven-repository-importer.properties">
    <classpath>
      <pathelement path="${maven.repository.importer.jar}" />
    </classpath>
  </taskdef>
  <delete dir="${build.dir}/maven-repo" /><!-- clean it -->
  <maven-repository-importer destdir="${build.dir}/maven-repo" version="1.1_03-SNAPSHOT">
    <artifact jar="${build.lib.dir}/jsf-api.jar"  pom="jsf-api-pom.xml" />
  </maven-repository-importer>
</target>

<target name="push-to-maven" depends="push-to-maven-prepare">
  <!-- import to CVS-->
  <tstamp />
  <echo>importing to CVS...</echo>
  <cvs dest="${build.dir}/maven-repo">
    <commandline>
      <argument value="-d:pserver:${user.name}@cvs.dev.java.net:/cvs" />
      <argument line="-z9 import -ko -W *.jar -kb -m" />
      <argument value="deploying new jars to the java.net maven repository" />

      <argument value="javaserverfaces-sources/repo" />
      <argument line="deployment-to-maven-repository t${DSTAMP}${TSTAMP}" />
    </commandline>
  </cvs>
</target>

</project>
